<?xml version="1.0" encoding="UTF-8"?>
<mule
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd ">



	<munit:config name="mico-customer-sapi-main-flows-suite.xml" />



	<munit:test
		name="get:\customers-200-test"
		description="Verifying functionality of [get:\customers:mico-customer-sapi-config-200-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="get:\customers:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="d095a618-0fcf-47ec-8cfd-0944c6f79b68"
				processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Get Customers"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="3eac1571-9059-4f98-bc3e-e319d2d08444"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="salesforceConfig"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value='#[[{"Id":"a004W00000dYSWBQA4","CustomerId__c":1,"First_Name__c":"John","Last_Name__c":"Doe","Phone_Number__c":"123-123-1234","Email__c":"john.doe@gmail.com","Address__c":"1234 Main Street, San Jose, 12345, US"}]]'
						mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="httpRequestConfiguration"
				method="GET"
				path="/customers">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:query-params><![CDATA[#[output application/java
---
{
	finalId : 100,
	initialId : 1
}]]]></http:query-params>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(200)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 200" />
			<munit-tools:assert-that
				expression="#[%dw 2.0
output application/json 
--- 
payload]"
				is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_200_customer_application_json.json', 'application/json'))]"
				message="The response payload is not correct!"
				doc:name="Assert That - Payload is Expected" />
		</munit:validation>
	</munit:test>



	<munit:test
		name="get:\customers-404-test"
		description="Verifying functionality of [get:\customers:mico-customer-sapi-config-404-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="get:\customers:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="fe711004-8741-4bf6-b072-81a2430b0424"
				processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Get Customers"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="3eac1571-9059-4f98-bc3e-e319d2d08444"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="salesforceConfig"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[[]]"
						mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="httpRequestConfiguration"
				method="GET"
				path="/customers">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:query-params><![CDATA[#[output application/java
---
{
	finalId : 100,
	initialId : 1
}]]]></http:query-params>
				<http:response-validator>
					<http:success-status-code-validator values="404" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(404)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 404" />
			<munit-tools:assert-that
				expression="#[%dw 2.0
output application/json 
--- 
payload]"
				is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_404_customer_application_json.json', 'application/json'))]"
				message="The response payload is not correct!"
				doc:name="Assert That - Payload is Expected" />
		</munit:validation>
	</munit:test>



	<munit:test
		name="get:\customers-400-test"
		description="Verifying functionality of [get:\customers:mico-customer-sapi-config-400-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="get:\customers:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:execution>
			<http:request
				config-ref="httpRequestConfiguration"
				method="GET"
				path="/customers">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="#[400]" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(400)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 400" />
			<munit-tools:assert-that
				doc:name="Assert That - Payload is Expected"
				doc:id="ec7ce151-5149-4a6c-b851-a3201a833cd0"
				message="The response payload is not correct!"
				expression="#[%dw 2.0
output application/json 
--- 
payload.errorMessage]"
				is='#[MunitTools::equalTo("Bad request!")]' />
		</munit:validation>
	</munit:test>



	<munit:test
		name="get:\customers-500-test"
		description="Verifying functionality of [get:\customers:mico-customer-sapi-config-500-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="get:\customers:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="6759aa4d-ac53-4923-9b2b-d88367f6c056"
				processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Get Customers"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="3eac1571-9059-4f98-bc3e-e319d2d08444"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="salesforceConfig"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="#['SALESFORCE:INVALID_INPUT']" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="httpRequestConfiguration"
				method="GET"
				path="/customers">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:query-params><![CDATA[#[output application/java
---
{
	finalId : 100,
	initialId : 1
}]]]></http:query-params>
				<http:response-validator>
					<http:success-status-code-validator values="500" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(500)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 500" />
			<munit-tools:assert-that
				doc:name="Assert That - Payload is Expected"
				doc:id="7d8c6f0f-48d0-47c3-93f5-1d49f6143e30"
				message="The response payload is not correct!"
				expression="#[%dw 2.0
output application/json 
--- 
payload.errorMessage]"
				is='#[MunitTools::equalTo("Server side error!")]' />
		</munit:validation>
	</munit:test>



	<munit:test
		name="get:\customers\(salesforceId)-200-test"
		description="Verifying functionality of [get:\customers\(customerId):mico-customer-sapi-config-200-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="get:\customers\(salesforceId):mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<set-variable
				value="#['1']"
				doc:name="salesforceId"
				doc:id="d5560783-0688-40be-8713-a929a9883220"
				variableName="salesforceId" />
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="a885c08e-b5d7-471f-92df-21dcbe4bfc47"
				processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Get Customer By Id"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="80be653d-e8a1-4838-b4ce-deebc10f1cd0"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="salesforceConfig"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[{"Id":"a004W00000dYSWBQA4","CustomerId__c":1,"First_Name__c":"John","Last_Name__c":"Doe","Phone_Number__c":"123-123-1234","Email__c":"john.doe@gmail.com","Address__c":"1234 Main Street, San Jose, 12345, US"}]]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="httpRequestConfiguration"
				method="GET"
				path="#['/customers/vars.salesforceId']">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(200)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 200" />
			<munit-tools:assert-that
				doc:name="Assert That - Payload is Expected"
				doc:id="501e0aa7-c172-4daf-8d2a-5049d96eb366"
				message="The response payload is not correct!"
				expression="#[%dw 2.0
output application/json 
--- 
payload]"
				is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_200_customer_{salesforceid}_application_json.json', 'application/json'))]" />
		</munit:validation>
	</munit:test>



	<munit:test 
		name="get:\customers\(salesforceId)-404-test" 
		description="Verifying functionality of [get:\customers\(customerId):mico-customer-sapi-config-404-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="get:\customers\(salesforceId):mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<set-variable
				variableName="salesforceId"
				value="#['1']"
				doc:name="salesforceId" />
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="dfacea83-a929-4b95-882c-32b5e20af7a2"
				processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Get Customer By Id"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="80be653d-e8a1-4838-b4ce-deebc10f1cd0"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="salesforceConfig"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[[]]"
						mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="httpRequestConfiguration"
				method="GET"
				path="#['/customers/$(vars.salesforceId)']">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="404" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(404)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 404" />
			<munit-tools:assert-that
				doc:name="Assert That - Payload is Expected"
				doc:id="e8ba3d3a-711b-48e6-b38a-ba55af8ec175"
				message="The response payload is not correct!"
				expression="#[%dw 2.0
output application/json 
--- 
payload]"
				is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/get_404_customer_{salesforceid}_application_json.json', 'application/json'))]" />
		</munit:validation>
	</munit:test>



	<munit:test 
		name="get:\customers\(salesforceId)-400-test" 
		description="Verifying functionality of [get:\customers\(customerId):mico-customer-sapi-config-400-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="get:\customers\(salesforceId):mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<set-variable value="#['1']" doc:name="salesforceId" doc:id="339885d0-34a4-485c-8a63-30e88422ac1a" variableName="salesforceId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="c414df3b-36a1-4d13-8073-6a75b081ffcb" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="getCustomerByIdFlow" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="fa368876-867a-4483-a932-d82d60e6b137" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="getCustomerByIdFlow" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="#['APIKIT:BAD_REQUEST']" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="httpRequestConfiguration"
				method="GET"
				path="#['/customers/$(vars.salesforceId)']">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="400" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(400)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 400" />
			<munit-tools:assert-that
				doc:name="Assert That - Payload is Expected"
				doc:id="9c55918a-14b7-420b-9907-0774510de446"
				message="The response payload is not correct!"
				expression="#[%dw 2.0
output application/json 
--- 
payload.errorMessage]"
				is='#[MunitTools::equalTo("Bad request!")]' />
		</munit:validation>
	</munit:test>



	<munit:test 
		name="get:\customers\(salesforceId)-500-test" 
		description="Verifying functionality of [get:\customers\(customerId):mico-customer-sapi-config-500-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="get:\customers\(salesforceId):mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<set-variable
				variableName="salesforceId"
				value="#['1']"
				doc:name="salesforceId" />
			<munit-tools:mock-when
				doc:name="Mock when"
				doc:id="60a3e0bc-2530-4436-b9f5-9469ef11447d"
				processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="Get Customer By Id"
						attributeName="doc:name" />
					<munit-tools:with-attribute
						whereValue="80be653d-e8a1-4838-b4ce-deebc10f1cd0"
						attributeName="doc:id" />
					<munit-tools:with-attribute
						whereValue="salesforceConfig"
						attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="#['SALESFORCE:INVALID_INPUT']" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request
				config-ref="httpRequestConfiguration"
				method="GET"
				path="#['/customers/$(vars.salesforceId)']">
				<http:headers><![CDATA[#[{"Accept":"application/json"}]]]></http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="500" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that
				expression="#[attributes.statusCode]"
				is="#[MunitTools::equalTo(500)]"
				message="The HTTP Status code is not correct!"
				doc:name="Assert That Status Code is 500" />
			<munit-tools:assert-that
				doc:name="Assert That - Payload is Expected"
				doc:id="8f46353e-116b-4c30-8188-8a705b5628f9"
				message="The response payload is not correct!"
				expression="#[%dw 2.0
output application/json 
--- 
payload.errorMessage]"
				is='#[MunitTools::equalTo("Server side error!")]' />
		</munit:validation>
	</munit:test>
	
	
	
	<munit:test 
		name="post:\customers-201-test" 
		description="Verifying functionality of [post:\customers:application\json:mico-customer-sapi-config-201-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="post:\customers:application\json:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when doc:name="Create new customer" doc:id="e5ee5439-0537-4262-87f7-02953fa6deb9" processor="salesforce:create">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Customer__c" attributeName="type" />
					<munit-tools:with-attribute whereValue="Create new record" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="244165fe-074e-49ec-a0eb-e4f536f40847" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value='#[{
"id": null,
"items": [
	{
		"exception": null,
		"message": null,
		"payload": {
			"success": true,
			"id": "a004W00000dYJdDQAW",
			"errors": []
		},
		"id": "a004W00000dYJdDQAW",
		"statusCode": null,
		"successful": true
	}
],
"successful": true
}]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy transform to JAVA and address joining" doc:id="155869bf-4b5b-4aae-810f-a1dd0507f152" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Transform to JAVA Array" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2234c0df-5f73-4228-a0af-1e7e10ffca15" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call>
					<munit-tools:assert-that doc:name="Assert that" doc:id="cffe9fcf-f838-4795-b580-56d60441fa66" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/request/post_customer_application_json.json', 'application/json'))]" expression="#[%dw 2.0
output application/json 
--- 
payload]" />
				</munit-tools:before-call>
				<munit-tools:after-call>
					<munit-tools:assert-that doc:name="Assert that" doc:id="153b910c-a6ba-4892-91a6-253ee061d9e4" is="#[%dw 2.0
output application/java
---
MunitTools::equalTo(readUrl('classpath://scaffolder/request/post_customer_application_java.json', 'application/json'))]" expression="#[payload]" />
				</munit-tools:after-call>
			</munit-tools:spy>
		</munit:behavior>
		<munit:execution>
			<http:request config-ref="httpRequestConfiguration" method="POST" path="/customers">
				<http:body ><![CDATA[#[%dw 2.0
output application/json
---
{
	"firstName": "John",
	"lastName": "Doe",
	"phoneNumber": "123-123-1234",
	"email": "john.doe@gmail.com",
	"address": {
		"address1": "1234 Main Street",
		"city": "San Jose",
		"zipCode": 12345,
		"country": "US"
	}
}]]]></http:body>
				<http:headers><![CDATA[#[{"Accept":"application/json","Content-Type":"application/json"}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(201)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 201" />
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="b57f8c06-2e81-4e25-9178-77f203cbacd3" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/post_201_customer_application_json.json', 'application/json'))]" />
			<munit-tools:assert-that doc:name="Assert That - Location Header is Expected" doc:id="82f8b916-6b5b-405d-a5c9-45903c3b7384" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
message.attributes.headers.Location]" is='#[MunitTools::equalTo("/customers/a004W00000dYJdDQAW")]' />
		</munit:validation>
	</munit:test>
	
	
	
	<munit:test name="post:\customers-201-customer-exists-test" description="Verifying functionality of [post:\customers:application\json:mico-customer-sapi-config-201-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="post:\customers:application\json:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when doc:name="Check if customer exists" doc:id="75961907-38e0-44c3-94af-2ac70078bd2a" processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Get Customer to check if it exists" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="0bd906e7-d692-4cb2-a889-add22619247d" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[{"Id":"a004W00000dYJdDQAW","CustomerId__c":"1","First_Name__c":"John","Last_Name__c":"Doe","Phone_Number__c": "123-123-1234","Email__c":"john.doe@gmail.com","Address__c":"1234 Main Street, San Jose, 12345, US"}]]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Create new customer" doc:id="06971640-a5e3-4173-a36a-503316f50ee7" processor="salesforce:create">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Customer__c" attributeName="type" />
					<munit-tools:with-attribute whereValue="Create new record" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="244165fe-074e-49ec-a0eb-e4f536f40847" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value='#[{
"id": null,
"items": [
	{
		"exception": null,
		"message": null,
		"payload": {
			"success": true,
			"id": "a004W00000dYJdDQAW",
			"errors": []
		},
		"id": "a004W00000dYJdDQAW",
		"statusCode": null,
		"successful": true
	}
],
"successful": true
}]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Return customer Id" doc:id="30ebb1c5-adc2-4d0b-83bb-308b2be30afc" processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Return CustomerID" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="9c648674-10c2-430d-a622-df24ec78b325" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value=' #[[
 	{
 		"Id": "a004W00000dYJdDQAW",
 		"type": "Customer__c",
 		"CustomerId__c": "1"
	}
]]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy transform to JAVA and address joining" doc:id="46277784-9838-4735-b4fb-cbf8f9f8d95b" processor="ee:transform">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Transform to JAVA Array" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2234c0df-5f73-4228-a0af-1e7e10ffca15" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call>
					<munit-tools:assert-that doc:name="Assert that" doc:id="8c0df567-77d0-449c-a7b9-fe680f6ee5ca" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/request/post_customer_application_json.json', 'application/json'))]" expression="#[%dw 2.0
output application/json 
--- 
payload]" />
				</munit-tools:before-call>
				<munit-tools:after-call>
					<munit-tools:assert-that doc:name="Assert that" doc:id="693f379e-d7d1-4ff1-8651-1f380e81699c" is="#[%dw 2.0
output application/java
---
MunitTools::equalTo(readUrl('classpath://scaffolder/request/post_customer_application_java.json', 'application/json'))]" expression="#[payload]" />
				</munit-tools:after-call>
			</munit-tools:spy>
		</munit:behavior>
		<munit:execution>
			<http:request config-ref="httpRequestConfiguration" method="POST" path="/customers">
				<http:body><![CDATA[#[%dw 2.0
output application/json
---
{
	"firstName": "John",
	"lastName": "Doe",
	"phoneNumber": "123-123-1234",
	"email": "john.doe@gmail.com",
	"address": {
		"address1": "1234 Main Street",
		"city": "San Jose",
		"zipCode": 12345,
		"country": "US"
	}
}]]]></http:body>
				<http:headers><![CDATA[#[{"Accept":"application/json","Content-Type":"application/json"}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(201)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 201" />
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="089b6283-5517-4482-9555-5505ea16de32" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/post_201_customer_application_json.json', 'application/json'))]" />
			<munit-tools:assert-that doc:name="Assert That - Location Header is Expected" doc:id="0474b340-fcd0-488f-8c26-08f92bef7777" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
message.attributes.headers.location]" is='#[MunitTools::equalTo("/customers/a004W00000dYJdDQAW")]' />
		</munit:validation>
	</munit:test>
	

	<munit:test name="post:\customers-201-2-test" description="Verifying functionality of [post:\customers:application\json:mico-customer-sapi-config-201-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="post:\customers:application\json:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit-tools:mock-when doc:name="Check if customer exists" doc:id="a8e8df13-3ad0-4de8-9185-a1282b714867" processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Get Customer to check if it exists" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="0bd906e7-d692-4cb2-a889-add22619247d" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[{"Id":"a004W00000dYJdDQAW","CustomerId__c":"1","First_Name__c":"John","Last_Name__c":"Doe","Phone_Number__c": "321-321-4321","Email__c":"doejohn@gmail.com","Address__c":"321 Side Street, San Paolo, 12345, US"}]]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Create new customer" doc:id="3860765d-aee9-4292-83c7-58b5fa2aebac" processor="salesforce:create">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Customer__c" attributeName="type" />
					<munit-tools:with-attribute whereValue="Create new record" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="244165fe-074e-49ec-a0eb-e4f536f40847" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value='#[{
"id": null,
"items": [
	{
		"exception": null,
		"message": null,
		"payload": {
			"success": true,
			"id": "a004W00000dYJdDQAW",
			"errors": []
		},
		"id": "a004W00000dYJdDQAW",
		"statusCode": null,
		"successful": true
	}
],
"successful": true
}]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Return customer Id" doc:id="9ad607cf-888a-412c-9e36-3be890cd7663" processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Return CustomerID" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="9c648674-10c2-430d-a622-df24ec78b325" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value=' #[[
 	{
 		"Id": "a004W00000dYJdDQAW",
 		"type": "Customer__c",
 		"CustomerId__c": "1"
	}
]]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy transform to JAVA and address joining" doc:id="6e2c4f1c-6f26-41b0-b1a9-465a96879072" processor="ee:transform">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Transform to JAVA Array" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2234c0df-5f73-4228-a0af-1e7e10ffca15" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call>
					<munit-tools:assert-that doc:name="Assert that" doc:id="d245ad4e-d341-4f27-a116-70cae2559751" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/request/post_customer_application_json.json', 'application/json'))]" expression="#[%dw 2.0
output application/json 
--- 
payload]" />
				</munit-tools:before-call>
				<munit-tools:after-call>
					<munit-tools:assert-that doc:name="Assert that" doc:id="47601743-ef6c-47d0-99af-d6670293e114" is="#[%dw 2.0
output application/java
---
MunitTools::equalTo(readUrl('classpath://scaffolder/request/post_customer_application_java.json', 'application/json'))]" expression="#[payload]" />
				</munit-tools:after-call>
			</munit-tools:spy>
		</munit:behavior>
		<munit:execution>
			<http:request config-ref="httpRequestConfiguration" method="POST" path="/customers">
				<http:body><![CDATA[#[%dw 2.0
output application/json
---
{
	"firstName": "John",
	"lastName": "Doe",
	"phoneNumber": "123-123-1234",
	"email": "john.doe@gmail.com",
	"address": {
		"address1": "1234 Main Street",
		"city": "San Jose",
		"zipCode": 12345,
		"country": "US"
	}
}]]]></http:body>
				<http:headers><![CDATA[#[{"Accept":"application/json","Content-Type":"application/json"}]]]></http:headers>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(201)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 201" />
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="d97bce00-ee62-425f-b0f9-e4c235ee3759" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/post_201_customer_application_json.json', 'application/json'))]" />
			<munit-tools:assert-that doc:name="Assert That - Location Header is Expected" doc:id="ad98da13-b18a-48d1-b4b9-06db43a6668f" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
message.attributes.headers.location]" is='#[MunitTools::equalTo("/customers/a004W00000dYJdDQAW")]' />
		</munit:validation>
	</munit:test>
	
	
	<munit:test 
		name="post:\customers-409-test" 
		description="Test conflict error" ignore="true">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="post:\customers:application\json:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit:set-event doc:name="Set Event" doc:id="14be24d2-2475-4142-bf31-e0af7500eed1">
				<munit:payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_customer_application_json.json')]" />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Check if customer exists" doc:id="661ece34-5b38-4264-9d34-09013c4f6b01" processor="salesforce:query" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Get Customer to check if it exists" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="0bd906e7-d692-4cb2-a889-add22619247d" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[{"Id":"a004W00000dYJdDQAW","CustomerId__c":"1","First_Name__c":"Kevin","Last_Name__c":"Doe","Phone_Number__c": "321-321-4321","Email__c":"john.doe@gmail.com","Address__c":"1234 Main Street, San Jose, 12345, US"}]]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="POST" doc:name="Request" doc:id="98784647-3441-46ed-8922-99544963d775" config-ref="httpRequestConfiguration" path="/customers">
				<http:headers><![CDATA[#[{"Accept":"application/json","Content-Type":"application/json"}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="409" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert That Status Code is 409" doc:id="140721d6-3409-493b-ba6f-6744658e36d1" message="The HTTP Status code is not correct!" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(409)]" />
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="b7a01695-4315-4a5a-9e65-a382a35c5f9b" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
payload]" is="#[MunitTools::equalTo(readUrl('classpath://scaffolder/response/post_409_customer_application_json.json', 'application/json'))]" />
		</munit:validation>
	</munit:test>
	
	
	
	<munit:test 
		name="post:\customers-400-test" 
		description="Verifying functionality of [post:\customers:application\json:mico-customer-sapi-config-400-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="post:\customers:application\json:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:execution>
			<http:request config-ref="httpRequestConfiguration" method="POST" path="/customers">
				<http:body ><![CDATA[#[%dw 2.0
output application/json
---
{
	"firstName": "John",
	"lastName": "Doe",
	"phoneNumber": "123-123-1234",
	"email": "john.doe@gmail.com",
	"address": {
		"address1": "1234 Main Street",
		"city": "San Jose",
		"zipCode": "12345",
		"country": "US"
	}
}]]]></http:body>
				<http:headers><![CDATA[#[{"Accept":"application/json","Content-Type":"application/json"}]]]></http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="400" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="68b42e60-1ddf-45ce-a66b-3714fffae93b" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
payload.errorMessage]" is='#[MunitTools::equalTo("Bad request!")]' />
		</munit:validation>
	</munit:test>
	
	
	
	<munit:test 
		name="post:\customers-500-test-check-if-customer-exists" 
		description="Verifying functionality of [post:\customers:application\json:mico-customer-sapi-config-500-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="post:\customers:application\json:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit:set-event doc:name="Set Event" doc:id="1b3e7ba1-7f79-4444-aeb5-1562304a2396">
				<munit:payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_customer_application_json.json')]" />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Check if customer exists" doc:id="875a3a1a-3f93-41c1-bf80-ce75ec25f195" processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Get Customer to check if it exists" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="0bd906e7-d692-4cb2-a889-add22619247d" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="#['SALESFORCE:INVALID_INPUT']" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request config-ref="httpRequestConfiguration" method="POST" path="/customers">
				<http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="500" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 500" />
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="2c0d9b8d-5fb0-493d-bf53-0c56b8113d73" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
payload.errorMessage]" is='#[MunitTools::equalTo("Server side error!")]' />
		</munit:validation>
	</munit:test>
	
	
	
	<munit:test 
		name="post:\customers-500-test-create-new-customer" 
		description="Verifying functionality of [post:\customers:application\json:mico-customer-sapi-config-500-application\json]" ignore="true">
		<munit:enable-flow-sources>
			<munit:enable-flow-source value="post:\customers:application\json:mico-customer-sapi-config" />
			<munit:enable-flow-source value="mico-customer-sapi-main" />
		</munit:enable-flow-sources>
		<munit:behavior>
			<munit:set-event doc:name="Set Event" doc:id="2e406a84-66b9-42bb-9add-39fbda9640a2">
				<munit:payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_customer_application_json.json')]" />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Check if customer exists" doc:id="8225d916-c37e-4562-ad59-ed80ba7bb702" processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Get Customer to check if it exists" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="0bd906e7-d692-4cb2-a889-add22619247d" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[[]]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Create new customer" doc:id="13ac1f31-5272-44bb-901b-bad3188225e2" processor="salesforce:create">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Customer__c" attributeName="type" />
					<munit-tools:with-attribute whereValue="Create new record" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="244165fe-074e-49ec-a0eb-e4f536f40847" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="#['SALESFORCE:INVALID_INPUT']" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<http:request method="POST" doc:name="Request" doc:id="08ff8b5e-bb29-40a0-b8ce-96f444245caf" config-ref="httpRequestConfiguration" path="/customers">
				<http:headers><![CDATA[#[{"Accept":"application/json","Content-Type":"application/json"}]]]></http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="500" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert That Status Code is 500" doc:id="13308f02-fef2-4c02-8a8d-41ab5b50df6c" message="The HTTP Status code is not correct!" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" />
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="b700de05-a4f1-430c-8505-9d05597fbf3f" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
payload.errorMessage]" is='#[MunitTools::equalTo("Server side error!")]' />
		</munit:validation>
	</munit:test>
		
		
		
	<munit:test 
		name="post:\customers-500-test-return-customer-id" 
		description="Verifying functionality of [post:\customers:application\json:mico-customer-sapi-config-500-application\json]" ignore="true">
		<munit:enable-flow-sources >
			<munit:enable-flow-source value="mico-customer-sapi-main" />
			<munit:enable-flow-source value="post:\customers:application\json:mico-customer-sapi-config" />
		</munit:enable-flow-sources>
		<munit:behavior >
			<munit:set-event doc:name="Set Event" doc:id="55962bae-baff-4976-a988-e429610bbd03" >
				<munit:payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_customer_application_json.json')]" />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Check if customer exists" doc:id="f58c8cb2-429f-40f8-b14c-0507655bee79" processor="salesforce:query">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="Get Customer to check if it exists" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="0bd906e7-d692-4cb2-a889-add22619247d" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[[]]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Create new customer" doc:id="d20fce8e-02bf-4320-82e0-8d3f4969e985" processor="salesforce:create">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Customer__c" attributeName="type" />
					<munit-tools:with-attribute whereValue="Create new record" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="244165fe-074e-49ec-a0eb-e4f536f40847" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value='#[{
"id": null,
"items": [
	{
		"exception": null,
		"message": null,
		"payload": {
			"success": true,
			"id": "a004W00000dYJdDQAW",
			"errors": []
		},
		"id": "a004W00000dYJdDQAW",
		"statusCode": null,
		"successful": true
	}
],
"successful": true
}]' mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Return customer id" doc:id="6c581c62-5f04-4c84-bfd5-b0abbc7797ba" processor="salesforce:query" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Return CustomerID" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="9c648674-10c2-430d-a622-df24ec78b325" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="salesforceConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="#['SALESFORCE:INVALID_INPUT']" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<http:request method="POST" doc:name="Request" doc:id="08660d11-8b9a-4d9c-98d5-53df429c2a0a" config-ref="httpRequestConfiguration" path="/customers">
				<http:headers><![CDATA[#[{"Accept":"application/json","Content-Type":"application/json"}]]]></http:headers>
				<http:response-validator>
					<http:success-status-code-validator values="500" />
				</http:response-validator>
			</http:request>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert That Status Code is 500" doc:id="3af5366f-d13f-4be6-8ced-7913b232478c" message="The HTTP Status code is not correct!" expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" />
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="cd278a41-6fe4-4000-acef-54d041fe9c8f" message="The response payload is not correct!" expression="#[%dw 2.0
output application/json 
--- 
payload.errorMessage]" is='#[MunitTools::equalTo("Server side error!")]' />
		</munit:validation>
	</munit:test>
	
	
	
</mule>